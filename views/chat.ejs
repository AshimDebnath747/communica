<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width,initial-scale=1.0">
    <title>Socket.IO chat</title>
    <style>
      body { margin: 0; padding-bottom: 3rem; font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif; }

      #form { background: rgba(0, 0, 0, 0.15); padding: 0.25rem; position: fixed; bottom: 0; left: 0; right: 0; display: flex; height: 3rem; box-sizing: border-box; backdrop-filter: blur(10px); }
      #input { border: none; padding: 0 1rem; flex-grow: 1; border-radius: 2rem; margin: 0.25rem; }
      #input:focus { outline: none; }
      #form > button { background: #333; border: none; padding: 0 1rem; margin: 0.25rem; border-radius: 3px; outline: none; color: #fff; }

      #messages { list-style-type: none; margin: 0; padding: 0; }
      #messages > li { padding: 0.5rem 1rem; }
      #messages > li:nth-child(odd) { background: #efefef; }
      a{
        text-decoration: none;
        color: black;
      }
      h1{
        background-color: blueviolet;
        text-align: center;
        border-top: 1px solid black;
   margin: 0;
      }
      #msg{
       margin: 0;
       font-weight: bold;
       
      }
      #by{
        margin: 3px;
        font-size:small;
        color: blue;
      }
    </style>
  </head>
  <body>
    <%- include("./partials/header") %>
   <h1> <a href="/community/info/<%= chatCommunity.id %>"><%=  chatCommunity.name %></a></h1>
    <ul id="messages"></ul>
    <form id="form" action="">
      <input id="input" autocomplete="off" /><button>Send</button>
    </form>
    <script src="/socket.io/socket.io.js"></script>
<script>
  
        const socket = io();

  var form = document.getElementById('form');
  var input = document.getElementById('input');
  var messages = document.getElementById('messages');
  const userName = document.getElementById("user").innerText;
  socket.emit("userName",userName);
  
  socket.emit("joinRoom","<%=  chatCommunity.id %>")
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    if (input.value) {
      socket.emit('chat message', input.value);
      input.value = '';
    }
  });
  socket.on('previousMessages', (messagess) => {
            const messagesUl = document.getElementById('messages');
            messagesUl.innerHTML = '';
            messagess.forEach(({ userName, msg }) => {
                var item = document.createElement('li');
               var message = document.createElement("p");
         message.id = "msg";
    var by = document.createElement("a")
    by.id = "by";
    message.textContent = msg;
    by.textContent = userName;
    item.append(by);
    item.append(message);
    messages.appendChild(item);
            });
        });
  socket.on('chat message', function(data) {
    const { userName , msg} = data;
    var item = document.createElement('li');
    var message = document.createElement("p");
    message.id = "msg";
    var by = document.createElement("a")
    by.id = "by";
    message.textContent = msg;
    by.textContent = userName;
    item.append(by);
    item.append(message);
    messages.appendChild(item);
    window.scrollTo(0, document.body.scrollHeight);
  });

</script>
  </body>
</html>